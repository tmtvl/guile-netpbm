(define-module (netpbm)
  #:use-module (netpbm image)
  #:use-module (srfi srfi-1)
  #:export (draw-point
	    draw-line
	    draw-rectangle))

(define (draw-point image x y color)
  (array-set! (image-raster image) color y x))

(define (draw-line image start-x start-y end-x end-y color)
  (cond ((and (= start-x end-x)
	      (= start-y end-y))
	 (draw-point image start-x start-y color))
	((= start-x end-x)
	 (let ((offset (min start-y end-y))
	       (dist (abs (- end-y start-y))))
	   (array-fill! (make-shared-array (image-raster image)
					   (lambda (i)
					     (list (+ i offset)
						   start-x))
					   (list 0 dist))
			color)))
	((= start-y end-y)
	 (let ((offset (min start-x end-x))
	       (dist (abs (- end-x start-x))))
	   (array-fill! (make-shared-array (image-raster image)
					   (lambda (i)
					     (list start-y
						   (+ i offset)))
					   (list 0 dist))
			color)))
	(else
	 (error "Not yet implemented")
	 (let ((points (find-points start-x end-x start-y end-y)))
	   (array-fill! (make-shared-array (image-raster image)
					   (lambda (i)
					     (vector-ref points i))
					   (list 0 (vector-length
						    points)))
			color)))))

(define (draw-rectangle image start-x start-y end-x end-y color)
  (cond ((and (= start-x end-x)
	      (= start-y end-y))
	 (draw-point image start-x start-y color))
	((or (= start-x end-x)
	     (= start-y end-y))
	 (draw-line image start-x start-y end-x end-y color))
	(else
	 (let ((x-offset (min start-x end-x))
	       (y-offset (min start-y end-y))
	       (x-dist (abs (- end-x start-x)))
	       (y-dist (abs (- end-y start-y))))
	   (array-fill! (make-shared-array (image-raster image)
					   (lambda (y x)
					     (list (+ y-offset y)
						   (+ x-offset x)))
					   (list 0 y-dist)
					   (list 0 x-dist))
			color)))))
